#include <kipr/botball.h>

/*
port 0 = right motor
port 1 = left motor
90 degree turn ~ 1010

*/
#define miniservo_up 675
#define miniservo_down 1450
#define miniservo_collect 600
#define claw_down 1983
#define claw_up 334
#define claw_open 1024
#define claw_close 141
#define black 3800
#define white 210
#define grey 1800
int gyrocalibrate() {
    int changeGyroZ = 0;//find average gyro value when still
    int i = 0;
    for(i = 0; i < 10000; i++) {
        changeGyroZ += gyro_z();
    }
    changeGyroZ /= 10000;

    return changeGyroZ;
}
void move(int speed, int time, int changeGyroZ) {//speed -100 to 100, time is in miliseconds
    int i = 0;
    int anglechange = 0;
    for(i = 0; i < time; i++) {//gyro move
        anglechange += gyro_z()-changeGyroZ;
        motor(0, speed+anglechange/300);
        motor(1, speed-anglechange/300);
        msleep(1);
    }
    ao();
}
void turn(int direction, int degree, int changeGyroZ) {
    int i = 0;
    int anglechange = 0;
    int x = degree*57000/90;
    if(direction == 1) { // 1 = counterclockwise, 0 = clockwise
        for(i = 0; i < 100; i++) {
            motor(0, 100);
            motor(1, -100);
            msleep(1);
        }
        while(anglechange > -x) {
            anglechange += gyro_z()-changeGyroZ;
            motor(0, 100);
            motor(1, -100);
            msleep(1);
        }
    } else {
        for(i = 0; i < 100; i++) {
            motor(0, -100);
            motor(1, 100);
            msleep(1);
        }
        while(anglechange < x) {
            anglechange += gyro_z()-changeGyroZ;
            motor(0, -100);
            motor(1, 100);
            msleep(1);
        }
    }
    ao();
}
int slowservo(int port, int position) {
    int i = 0;
    int x = get_servo_position(port);
    if(x > position) {
  	  	while(x > position) {
            x -= 10;
        	set_servo_position(port, x);
            msleep(5);
    	}
    } else {
        while(x < position) {
            x += 10;
        	set_servo_position(port, x);
            msleep(5);
    	}
    }
}

void drive_until_line(int color, int speed, int changeGyroZ){
   if(color == white+469){
       int i = 0;
       int anglechange = 0;
       while(analog(0) > color+469){
        	anglechange += gyro_z()-changeGyroZ;
        	motor(0, speed+anglechange/300);
        	motor(1, speed-anglechange/300);
        	msleep(1);
       }
   } else {
       int i = 0;
       int anglechange = 0;
       while(analog(0) < color-1400){
        	anglechange += gyro_z()-changeGyroZ;
        	motor(0, speed+anglechange/300);
        	motor(1, speed-anglechange/300);
        	msleep(1);
       }
   }
   ao();
}
int pick_up_poms()
{
    
    int i;
    
    set_servo_position(2, miniservo_collect);
    msleep(500);
    
    set_servo_position(0, claw_open);
    msleep(500);
    
    set_servo_position(1, claw_down);
    msleep(1000);
    
    set_servo_position(0, claw_close);
    msleep(1500);
    
    slowservo(1, claw_up);
    
    set_servo_position(0, 800);
    msleep(500);
    
    set_servo_position(1, claw_down);
    msleep(500);
    
    set_servo_position(1, claw_up+500);
    msleep(500);
    
    while(i < 2){
        slowservo(2, miniservo_down);
 
        slowservo(2, miniservo_up);
        
        i++;
    }

    
    return 0;
}


int main()
{
    enable_servos();
    	int change = gyrocalibrate();
    	
     
    	set_servo_position(3, 1981);
    	msleep(500);
    
    	set_servo_position(2, 800);
    	msleep(500);
    
    	set_servo_position(1, claw_up+300);
    	msleep(1000);
    	
    	move(50,425,change);
    	ao();
    	msleep(1000);
    	
        //turn(0,0,change);
    	motor(0,-100);
    	motor(1, 100);
    	msleep(750);
  		
    	//move(-50,15,change);
    	//ao();
    	//msleep(1000);
/*    
    	pick_up_poms();
    
    	set_servo_position(1, claw_up);
  
    	turn(1,0,change);
    	msleep(1000);
       

    	move(60,1000,change);
    	ao();
    	msleep(1000);
  	
   		turn(0,0, change);
    	msleep(1000);
    	
    	move(-50,150,change);
    	ao();
    	msleep(1000);
    	
    	pick_up_poms();
   
*/   	
/*
    	move(50,700,change);
    	ao();
    	msleep(1000);
    
    	pick_up_poms();
    	move(50,1000,change);
    	ao();
    	msleep(1000);
*/   
    
    disable_servos();
    return 0;
}
