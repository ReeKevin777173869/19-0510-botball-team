#include <kipr/botball.h>

/*
port 0 = right motor
port 1 = left motor

*/
#define miniservo_up 591
#define miniservo_down 1450
#define miniservo_collect 600
#define claw_down 1983
#define claw_up 334
#define claw_open 1024
#define claw_close 141
#define black 3000
#define white 220
#define grey 1630
int gyrocalibrate() {
    int changeGyroZ = 0;//find average gyro value when still
    int i = 0;
    for(i = 0; i < 10000; i++) {
        changeGyroZ += gyro_z();
    }
    changeGyroZ /= 10000;

    return changeGyroZ;
}
void move(int speed, int time, int changeGyroZ) {//speed -100 to 100, time is in miliseconds
    int i = 0;
    int anglechange = 0;
    for(i = 0; i < time; i++) {//gyro move
        anglechange += gyro_z()-changeGyroZ;
        motor(0, speed+anglechange/300);
        motor(1, speed-anglechange/300);
        msleep(1);
    }
    ao();
}
void turn(int direction, int degree, int changeGyroZ) {
    int i = 0;
    int anglechange = 0;
    int x = degree*56000/90;
    if(direction == 1) { // 1 = counterclockwise, 0 = clockwise
        for(i = 0; i < 100; i++) {
            motor(0, 100);
            motor(1, -100);
            msleep(1);
        }
        while(anglechange > -x) {
            anglechange += gyro_z()-changeGyroZ;
            motor(0, 100);
            motor(1, -100);
            msleep(1);
        }
    } else {
        for(i = 0; i < 100; i++) {
            motor(0, -100);
            motor(1, 100);
            msleep(1);
        }
        while(anglechange < x) {
            anglechange += gyro_z()-changeGyroZ;
            motor(0, -100);
            motor(1, 100);
            msleep(1);
        }
    }
    ao();
}

void drive_until_line(int color, int speed, int change){
    if(color == white+469){
        while(analog(0) > color+469){
            move(speed, 5, change);
        }
    }
    else{ 
        while(analog(0) < color){
            move(speed, 5, change);
        }
    }
    //drive_until_line(white, change);
}

int main()
{
    //start centered on pipe connectors
    int change = gyrocalibrate();
    enable_servos();
    /*
drive_until_line(black, 100, change);
drive_until_line(white+469, 20, change);
*/



    set_servo_position(2, 644);


    set_servo_position(1, claw_up);


    set_servo_position(0, claw_close);
    //Get the first pom
    set_servo_position(0, claw_open);
    msleep(500);
    set_servo_position(1, claw_down);
    msleep(1000);
    set_servo_position(0, claw_close);
    msleep(500);
    set_servo_position(1, claw_up);
    //Get the barrel
    move(100, 420, change);
    ao();
    msleep(1000);
    drive_until_line(grey, 100, change);
    msleep(1000);

    move(-100, 100, change);
    msleep(1000);


    turn(0, 90, change); //90 clockwise
    msleep(1000);

    move(100,731, change);


    drive_until_line(black, 50, change);
    msleep(1000);


    turn(1, 90, change);
    msleep(600);


    move(-75,800, change);
    msleep(1000);
    
    int i = 0;
       
    while(i<3){
        move(75, 50, change);
        msleep(50);
        move(-100, 50, change);
        msleep(50);
        i++;
    }
	 
    //Proceed to get leftmost pile of poms


    //turn left
    //execute pom pick up
    //


    disable_servos();
    return 0;

}
